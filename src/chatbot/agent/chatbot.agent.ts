import { Injectable } from '@nestjs/common';
import { CentralBloodService } from 'src/central_bloods/central_blood.service';
import { InforHealthService } from 'src/InforHealths/infor-healths.service';
import { LocationService } from 'src/locations/location.service';
import { SearchService } from 'src/search/search.service';
import { getWeekdayFromDateString } from 'src/shared/utils/getWeekDayFromDateString';
import { parseWeekday } from 'src/shared/utils/parseWeekDay';
import { removeVietnameseTones } from 'src/shared/utils/removeVNTones';
import { UsersService } from 'src/users/users.service';
import { WorkingHoursService } from 'src/working_hours/working_hours.service';

@Injectable()
export class ChatbotAgent {
  private readonly openRouterAI: string;

  constructor(
    private readonly inforHealthService: InforHealthService,
    private readonly userService: UsersService,
    private readonly searchService: SearchService,
    private readonly centralBloodService: CentralBloodService,
    private readonly locationService: LocationService
  ) {
    const apiKey = process.env.OPENROUTER_API_KEY;
    if (!apiKey) {
      throw new Error('Missing OpenRouter API key');
    }
    this.openRouterAI = apiKey;
  }

  private async handleUserProfile(userId: string): Promise<string> {
    const user = await this.userService.findOne(userId);
    const { fullname, gender, dob, phone, email } = user;
    let address = 'Ch∆∞a c·∫≠p nh·∫≠t';

    if (typeof user.location_id === 'string') {
      const location = await this.locationService.findById(user.location_id);
      address = location?.full_address ?? 'Ch∆∞a c·∫≠p nh·∫≠t';
    } else if (typeof user.location_id === 'object' && user.location_id !== null) {
      address = (user.location_id as { full_address?: string }).full_address ?? 'Ch∆∞a c·∫≠p nh·∫≠t';
    }

    const dateOfBirth = dob
      ? new Date(dob).toLocaleDateString('vi-VN')
      : 'Ch∆∞a c·∫≠p nh·∫≠t';

    let response = `üìå Th√¥ng tin h·ªì s∆° c·ªßa b·∫°n:\n`;
    response += `üë§ H·ªç t√™n: ${fullname}\n`;
    response += `üë´ Gi·ªõi t√≠nh: ${gender || 'Ch∆∞a c·∫≠p nh·∫≠t'}\n`;
    response += `üéÇ Ng√†y sinh: ${dateOfBirth}\n`;
    response += `üìû S·ªë ƒëi·ªán tho·∫°i: ${phone || 'Ch∆∞a c·∫≠p nh·∫≠t'}\n`;
    response += `üìß Email: ${email}\n`;
    response += `üè† ƒê·ªãa ch·ªâ: ${address}\n`;
    return response;
  }

  private async handleInforHealth(userId: string): Promise<string> {
    const infor = await this.inforHealthService.findOneByUserId(userId);
    if (!infor) {
      return "B·∫°n ch∆∞a khai b√°o th√¥ng tin s·ª©c kh·ªèe. Vui l√≤ng c·∫≠p nh·∫≠t ƒë·ªÉ ti·∫øp t·ª•c.";
    }

    const height = infor.height ? `${infor.height} cm` : 'Ch∆∞a c·∫≠p nh·∫≠t';
    const weight = infor.weight_decimal ? `${infor.weight_decimal} kg` : 'Ch∆∞a c·∫≠p nh·∫≠t';
    const pressure = infor.blood_pressure ? `${infor.blood_pressure} mmHg` : 'Ch∆∞a c·∫≠p nh·∫≠t';
    const history = infor.medical_history || 'Kh√¥ng c√≥';
    const status = infor.status_health || 'Ch∆∞a x√°c ƒë·ªãnh';
    const latest = infor.latest_donate ? new Date(infor.latest_donate).toLocaleDateString('vi-VN') : 'Ch∆∞a c√≥';

    let response = `üìã T√¨nh tr·∫°ng s·ª©c kh·ªèe b·∫°n ƒë√£ khai b√°o:\n`;
    response += `‚Ä¢ Chi·ªÅu cao: ${height}\n`;
    response += `‚Ä¢ C√¢n n·∫∑ng: ${weight}\n`;
    response += `‚Ä¢ Huy·∫øt √°p: ${pressure}\n`;
    response += `‚Ä¢ Ti·ªÅn s·ª≠ b·ªánh: ${history}\n`;
    response += `‚Ä¢ T√¨nh tr·∫°ng hi·ªán t·∫°i: ${status}\n`;
    response += `‚Ä¢ L·∫ßn hi·∫øn m√°u g·∫ßn nh·∫•t: ${latest}\n`;

    return response;
  }

  private async handleCenterTotal(): Promise<string> {
    const centers = await this.centralBloodService.findAll(1, 9999, "");
    const list = centers.result;
    if (!list.length) return "Hi·ªán t·∫°i ch∆∞a c√≥ trung t√¢m hi·∫øn m√°u n√†o.";
    let response = `Hi·ªán c√≥ t·ªïng c·ªông ${list.length} trung t√¢m hi·∫øn m√°u:\n\n`;
    for (const [index, center] of list.entries()) {
      response += `${index + 1}. ${center.centralBlood_name} - ${center.centralBlood_address}\n`;
      if (center.working_id?.length) {
        const workingList = center.working_id as any[];
        for (const w of workingList) {
          const day = w.day_of_week;
          const open = new Date(w.open_time).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });
          const close = new Date(w.close_time).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });
          const openText = w.is_open ? 'ƒêang m·ªü c·ª≠a' : 'ƒê√≥ng c·ª≠a';
          response += `   ‚Ä¢ ${day}: ${open} - ${close} (${openText})\n`;
        }
      } else {
        response += `   ‚Ä¢ Kh√¥ng c√≥ th√¥ng tin gi·ªù l√†m vi·ªác\n`;
      }
      response += '\n';
    }
    return response;
  }

  private async handleCenterNearest(user_id: string, radiusInKm: number = 5): Promise<string> {
    const listCenterNearest = await this.searchService.searchCenterNearestFromUserAddress(user_id, radiusInKm);
    if (!listCenterNearest.length) return `Hi·ªán t·∫°i kh√¥ng c√≥ trung t√¢m n√†o g·∫ßn ƒë·ªãa ch·ªâ b·∫°n ƒë√£ ƒëƒÉng k√Ω trong b√°n k√≠nh ${radiusInKm}km, b·∫°n mu·ªën t√¨m v·ªõi b√°n k√≠nh kh√°c?`;

    let response = `Trong b√°n k√≠nh ${radiusInKm}km, hi·ªán c√≥ ${listCenterNearest.length} trung t√¢m g·∫ßn ƒë·ªãa ch·ªâ b·∫°n ƒë√£ ƒëƒÉng k√Ω:\n\n`;
    const centers = await this.centralBloodService.findAll(1, 9999, "");
    const list = centers.result;
    const nearestNames = listCenterNearest.map((c) => c.centralBlood_name);
    const filteredCenters = list.filter((center) => nearestNames.includes(center.centralBlood_name));

    for (const [index, center] of filteredCenters.entries()) {
      response += `${index + 1}. ${center.centralBlood_name} - ${center.centralBlood_address}\n`;
      if (center.working_id?.length) {
        const workingList = center.working_id as any[];
        for (const w of workingList) {
          const day = w.day_of_week;
          const open = new Date(w.open_time).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });
          const close = new Date(w.close_time).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });
          const openText = w.is_open ? 'M·ªü c·ª≠a' : 'ƒê√≥ng c·ª≠a';
          response += `   ‚Ä¢ ${day}: ${open} - ${close} (${openText})\n`;
        }
      } else {
        response += `   ‚Ä¢ Kh√¥ng c√≥ th√¥ng tin gi·ªù l√†m vi·ªác\n`;
      }
      response += '\n';
    }
    return response;
  }

  private async handleCenterOpenAt(user_id: string, radiusInKm: number = 5, day: string, hour: number | null): Promise<string> {
    const nearbyCenters = await this.searchService.searchCenterNearestFromUserAddress(user_id, radiusInKm);
    if (!nearbyCenters.length) return 'Kh√¥ng c√≥ trung t√¢m n√†o g·∫ßn b·∫°n.';

    const centers = await this.centralBloodService.findAll(1, 9999, '');
    const nearestNames = nearbyCenters.map(c => c.centralBlood_name);
    const filtered = centers.result.filter(c => nearestNames.includes(c.centralBlood_name));

    let response = `Nh·ªØng trung t√¢m g·∫ßn b·∫°n m·ªü c·ª≠a v√†o ${day}${hour !== null ? ` l√∫c ${hour} gi·ªù bao g·ªìm:` : ''}:\n\n`;
    let found = false;

    for (const center of filtered) {
      const workingList = center.working_id as any[];
      const match = workingList?.find(w => {
        const isSameDay = w.day_of_week.toLowerCase() === day.toLowerCase();
        if (!isSameDay || !w.is_open) return false;

        if (hour === null) return true;
        const openH = new Date(w.open_time).getHours();
        const closeH = new Date(w.close_time).getHours();
        return hour >= openH && hour < closeH;
      });

      if (match) {
        found = true;
        response += `‚Ä¢ ${center.centralBlood_name} - ${center.centralBlood_address}\n`;
      }
    }

    if (!found) return `Kh√¥ng c√≥ trung t√¢m n√†o g·∫ßn b·∫°n m·ªü c·ª≠a v√†o ${day}${hour !== null ? ` l√∫c ${hour} gi·ªù` : ''}.`;
    return response;
  }



  async handleMessage(user_id: string, message: string): Promise<string> {
    const lowerMsg = removeVietnameseTones(message);

    const mustInclude = ['trung tam', 'central', 'center', 'noi hien mau', 'dia diem hien mau', 'noi nhan mau', 'dia diem nhan mau'];
    const totalKeywords = ['tat ca', 'bao nhieu', 'danh sach', 'co nhung', 'toan bo'];
    const nearbyKeywords = ['gan nhat', 'gan day', 'gan toi', 'quanh day', 'ban kinh', 'xung quanh'];
    const userKeywords = ['thong tin ca nhan', 'profile', 'ho so', 'thong tin da dang ky', 'thong tin ma toi da dang ky'];
    const scheduleKeywords = ['mo cua', 'dong cua', 'gio lam', 'lich lam', 'lam viec', 'trung tam'];
    const healthKeywords = ['suc khoe', 'tinh trang', 'trang thai suc khoe', 'chieu cao', 'can nang', 'benh', 'lich su hien mau'];

    const hourMatch = lowerMsg.match(/(\d{1,2})\s*(h|gio|gi·ªù)/);
    let hour: number | null = hourMatch ? parseInt(hourMatch[1]) : null;

    const weekdayMatch = lowerMsg.match(/thu\s*(\d|hai|ba|tu|nam|sau|bay|b·∫£y|cn|chu nhat)/);
    const weekdayFromThu = weekdayMatch ? parseWeekday(weekdayMatch[1]) : null;
    const weekdayFromNgay = getWeekdayFromDateString(lowerMsg);
    const weekday = weekdayFromThu || weekdayFromNgay;

    if (hour === null) {
      if (lowerMsg.includes('sang')) hour = 8;
      else if (lowerMsg.includes('trua')) hour = 12;
      else if (lowerMsg.includes('chieu')) hour = 16;
      else if (lowerMsg.includes('toi')) hour = 19;
    }

    else if (lowerMsg.includes('toi') && hour < 12) {
      hour += 12;
    }
    const isHealthQuery = healthKeywords.some((k) => lowerMsg.includes(k));

    const isScheduleQuery =
      mustInclude.some(k => lowerMsg.includes(k)) &&
      scheduleKeywords.some(k => lowerMsg.includes(k)) &&
      (weekday !== null);

    const isUserQuery = userKeywords.some((k) => lowerMsg.includes(k));

    const isContainMustInclude = mustInclude.some((k) => lowerMsg.includes(k));

    const isTrungTamQuery =
      isContainMustInclude && totalKeywords.some((k) => lowerMsg.includes(k));

    const isNearbyQuery =
      isContainMustInclude && nearbyKeywords.some((k) => lowerMsg.includes(k));

    const radiusMatch = lowerMsg.match(/(\d+)\s*(km|kilomet|ki-lo-met)?/);
    const radiusInKm = radiusMatch ? parseInt(radiusMatch[1]) : 5;

    if (isUserQuery) {
      return await this.handleUserProfile(user_id);
    }

    if (isHealthQuery) {
      return await this.handleInforHealth(user_id);
    }

    if (isScheduleQuery) {
      return await this.handleCenterOpenAt(user_id, radiusInKm, weekday!, hour);
    }

    if (isNearbyQuery) {
      return await this.handleCenterNearest(user_id, radiusInKm);
    }

    if (isTrungTamQuery) {
      return await this.handleCenterTotal();
    }

    const systemPrompt = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI h·ªó tr·ª£ hi·∫øn m√°u cho c∆° s·ªü y t·∫ø. B·∫°n c√≥ th·ªÉ gi√∫p:
- Gi·∫£i th√≠ch v·ªÅ nh√≥m m√°u v√† truy·ªÅn m√°u ph√π h·ª£p.
- H∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng ƒëƒÉng k√Ω hi·∫øn m√°u.
- Gi·∫£i th√≠ch v·ªÅ ph·ª•c h·ªìi sau khi hi·∫øn m√°u.
- Gi√∫p ng∆∞·ªùi c·∫ßn m√°u t√¨m nh√≥m m√°u ph√π h·ª£p.
- Tr·∫£ l·ªùi v·ªÅ l·ªãch s·ª≠ hi·∫øn m√°u, ƒë·ªãa ƒëi·ªÉm, v√† quy tr√¨nh.

H√£y lu√¥n tr·∫£ l·ªùi b·∫±ng **ti·∫øng Vi·ªát** m·ªôt c√°ch r√µ r√†ng, th√¢n thi·ªán v√† d·ªÖ hi·ªÉu cho ng∆∞·ªùi d√πng.
Lu√¥n n√≥i chuy·ªán th√¢n thi·ªán, ng·∫Øn g·ªçn, r√µ r√†ng nh∆∞ ƒëang t∆∞ v·∫•n tr·ª±c ti·∫øp v·ªõi ng∆∞·ªùi d√¢n Vi·ªát Nam.
`.trim();

    const requestBody = {
      model: 'meta-llama/llama-3-8b-instruct',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: message },
      ],
      temperature: 0.7,
      max_tokens: 500,
    };

    try {
      const res = await fetch('https://openrouter.ai/api/v1/chat/completions', {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${this.openRouterAI}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      if (!res.ok) {
        const errText = await res.text();
        console.error('OpenRouter API error:', errText);
        throw new Error(`API call failed: ${res.status} ${res.statusText}`);
      }

      const data = await res.json();
      return data.choices?.[0]?.message?.content ?? 'Xin l·ªói, t√¥i ch∆∞a th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.';
    } catch (err: any) {
      console.error('L·ªói chatbot:', err.message);
      return 'Xin l·ªói, hi·ªán t·∫°i t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i sau.';
    }
  }
} 1